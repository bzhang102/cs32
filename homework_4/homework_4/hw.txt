206142605
Yuxiang Zhang

1e. Test 2 uses an iterator to traverse the vector, but because the vector needs to be reallocated, the iterator becomes invalidated, and will not result in some items not being MAGIC anymore.

3. The < and == operators are not defined in the Coord class, so when Map tries to use them, they don't exist.

4b. There needs to be some way to keep track of and add to the current path while traversing the tree. Since no additional containers are allowed, a two-parameter overload is necessary.

5a. O(N^3): The outer loop iterates N times, the middle loop iterates N*N times, and the inner loop iterates N*N*(N-1) times. This simplifies to N^3 times, and since random access is constant time, the overall time complexity is O(N^3).
5b. O(N^3): The outer loop iterates N times, the middle loop iterates N*N/2 times, and the inner loop iterates N*N/2*N times. This simplifies to N^3 times, and since random access is constant time, the overall time complexity is O(N^3).

6a. O(N^2): The Map::get() traverses its internal list once, so N. The loop then traverses another time, calling get (N) and insert (N), so N + N(N + N). Then, it calls Map::insert(), which traverses the loop another time, so N + N(N + N) + N. This simplifies to O(N^2).
6b. O(N): This function iterates through the list once, resulting in N. This is much better than the implementation in 6a.
