Yuxiang Zhang
206142605

1. Description of Control Flow:
    General Overview:
        - This implementation of Marble Madness relies heavily on the StudentWorld class to perform all the operations that require knowledge of where ALL Actors are in the world.
        - StudentWorld stores all actors (including the Player) in a List, which is populated, then iterated through each tick.
        - An additional pointer to the player is also kept outside the List for easy access when it is needed, for example, to get the Player's health when checking if the Player is dead.
        - All actors specify what they are transparent to (see #3 for details) in order to determine what can colocate onto the same square it is on.
        - Additional behavior identification functions (that return bools) are used to classify objects based on their behavior.
        - All Actors can take damage, but for some actors (like wall), their hp doesn't actually decrease, and they don't die

    Specific Control Flow for each doSomething():
        I. Wall: Does nothing
        II. Player: Checks for key press, then either
            a. Shoots
            b. Tells student world to try to move the player
        III. Pea: Tells world to try to move the pea
        IV. Pit:
            a. Asks world to see if a marble is collocated with it
            b. If so, swallows it and disappears
        V. Exit:
            a. Asks world if all the crystals have been picked up and reveals itself if that's true
            b. Checks if player is standing on it, and if so, tells world to complete level
        VI. All Pickups:
            a. Asks world to see if the player is collacted with it
            b. If so, does pickup specific things (increments score by set amount, increments lives, etc.)
        VII. RageBot: If current tick is one that it can act on, asks world if it can shoot at the player
                i. If so, shoots
                ii. If not, asks world to try to move it
        VIII. ThiefBot: If current tick is one that it can act on,
            a. If it's mean, asks world if it can shoot and shoots, or else
            b. If there is a pickup that can be stolen that it's collocated with, steal
            c. Or else, ask world to try to move it
        IX: ThiefBotFactory:
            a. Asks world if there are less than 3 ThiefBots in a 7x7 box around it
            b. If so, there is a 2% chance per tick to spawn a new ThiefBot of the same 'meanness' as the factory on the same square

    Specific Control Flow for some nontrivial helper functions I created in StudentWorld:
        I. movePlayer():
            a. Gets Target Coordinates
            b. Iterates through all actors to see if anything blocks the player
            c. If no obstacles found move, or else, if it's an unobstructed marble, pushes it
            d. Moves to target
        II. movePea():
            a. Gets Target Coordinates
            b. Iterates through all actors to see if anything blocks the pea, if so, damages it and tells the pea to disappear
                i. If a factory is encountered, tells pea to die, but continues iterating to see if anything can actually be damaged
            c. Moves to target
            d. Repeates step b.
        III. moveRageBot():
            a. Gets Target Coordinates
            b. Sees if the next square doesn't contain a robot-opaque actor:
                i. If so, moves to target
                ii. If not, turns bot around 180Â°
        IV. moveThiefBot():
            a. Gets Target Coordinates
            b. Sees if the next square doesn't contain a robot-opaque actor:
                i. If so, moves to target
                ii. If not, tells bot to turn to random direction and attempt to move again
        V. canShoot():
            a. Based on direction the bot is pointing
            b. Sees if there is an actor that is pea-opaque between the bot and the player

2. List of Unimplemented Functionality:
    N/A, all functionality described by spec implemented (that I know of...) (I hope....)

3. Other Design Choices:
    - Class Structure and Transparency System Used:
            Actor
                Wall (Opaque)
                Player (Opaque)
                Marble (Opaque)
                Pea (Transparent)
                Pit (Pea and Marble Transparent)
                Exit (Pea, Robot, and Player Transparent)
                Pickup (Pea, Robot, and Player Transparent)
                    Crystal
                    ExtraLife
                    RestoreHealth
                    Ammo
                Bot (Robot Transparent to other Bots)
                    RageBot
                    ThiefBot(Mean vs Reg is a boolean)
                ThiefBotFactory(Mean vs Reg is a boolean) (Opaque)

    - Random Generation uses std::rand(), then mods the result by the range of the values it wants. For example, to get a random int between 0 and 49, rand() % 50 (to determine whether a factory spawns a new thiefbot).
    - The mean thiefbots and mean thiefbot factories are not implemented using separate classes, but instead using a boolean m_isMean attribute. This determines the health/image and whether or not a thiefbot can shoot, and the type of thiefbot spawned by the factories. This was done because I thought it would be simpler to have a boolean field than to just create new classes every time we needed a minor difference in behavior (I emailed Carey and he said it was a reasonable choice, and that it was up to me).
